/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DotoliStakingInterface extends ethers.utils.Interface {
  functions: {
    "REWARD_RATE()": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "getStaked(address)": FunctionFragment;
    "maxReward()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "s_balances(address)": FunctionFragment;
    "s_lastUpdateTime()": FunctionFragment;
    "s_rewardPerTokenStored()": FunctionFragment;
    "s_rewards(address)": FunctionFragment;
    "s_rewardsToken()": FunctionFragment;
    "s_stakingToken()": FunctionFragment;
    "s_totalStakedSupply()": FunctionFragment;
    "s_userRewardPerTokenPaid(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stopRewardAt()": FunctionFragment;
    "totalClaimedReward()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "REWARD_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "getStaked", values: [string]): string;
  encodeFunctionData(functionFragment: "maxReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "s_balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "s_lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "s_rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "s_rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalStakedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_userRewardPerTokenPaid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stopRewardAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "REWARD_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalStakedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopRewardAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "RewardsClaimed(address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "WithdrewStake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewStake"): EventFragment;
}

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type StakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type WithdrewStakeEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export class DotoliStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DotoliStakingInterface;

  functions: {
    REWARD_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earned(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStaked(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    s_rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    s_stakingToken(overrides?: CallOverrides): Promise<[string]>;

    s_totalStakedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopRewardAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimedReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  claimReward(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStaked(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxReward(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  s_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  s_lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  s_rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  s_rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  s_rewardsToken(overrides?: CallOverrides): Promise<string>;

  s_stakingToken(overrides?: CallOverrides): Promise<string>;

  s_totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  s_userRewardPerTokenPaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopRewardAt(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimedReward(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStaked(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxReward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardsToken(overrides?: CallOverrides): Promise<string>;

    s_stakingToken(overrides?: CallOverrides): Promise<string>;

    s_totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stopRewardAt(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedReward(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RewardsClaimed(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    RewardsClaimed(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "Staked(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Staked(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "WithdrewStake(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    WithdrewStake(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStaked(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxReward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    s_rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    s_rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    s_totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopRewardAt(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedReward(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REWARD_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaked(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_totalStakedSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopRewardAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimedReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
