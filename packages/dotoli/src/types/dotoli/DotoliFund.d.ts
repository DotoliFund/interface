/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DotoliFundInterface extends ethers.utils.Interface {
  functions: {
    "collectPositionFee(uint256,(uint256,uint128,uint128))": FunctionFragment;
    "decreaseLiquidity(uint256,(uint256,uint128,uint256,uint256,uint256))": FunctionFragment;
    "deposit(uint256,address,uint256)": FunctionFragment;
    "increaseLiquidity(uint256,(uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "info()": FunctionFragment;
    "mintNewPosition(uint256,address,(address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "setting()": FunctionFragment;
    "swap(uint256,address,tuple[])": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "weth9()": FunctionFragment;
    "withdraw(uint256,address,uint256)": FunctionFragment;
    "withdrawFee(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collectPositionFee",
    values: [
      BigNumberish,
      {
        tokenId: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [
      BigNumberish,
      {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [
      BigNumberish,
      {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values: [
      BigNumberish,
      string,
      {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      BigNumberish,
      string,
      {
        swapType: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        fee: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        amountInMaximum: BigNumberish;
        amountOutMinimum: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        path: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth9", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "CollectPositionFee(uint256,address,address,address,uint256,uint256)": EventFragment;
    "DecreaseLiquidity(uint256,address,address,address,uint256,uint256)": EventFragment;
    "Deposit(uint256,address,address,uint256)": EventFragment;
    "DepositFee(uint256,address,address,uint256)": EventFragment;
    "IncreaseLiquidity(uint256,address,address,address,uint256,uint256)": EventFragment;
    "MintNewPosition(uint256,address,address,address,uint256,uint256)": EventFragment;
    "Swap(uint256,address,address,address,uint256,uint256)": EventFragment;
    "Withdraw(uint256,address,address,uint256,uint256)": EventFragment;
    "WithdrawFee(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectPositionFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintNewPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFee"): EventFragment;
}

export type CollectPositionFeeEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    token0: string;
    token1: string;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type DecreaseLiquidityEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    token0: string;
    token1: string;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    token: string;
    amount: BigNumber;
  }
>;

export type DepositFeeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    token: string;
    amount: BigNumber;
  }
>;

export type IncreaseLiquidityEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    token0: string;
    token1: string;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type MintNewPositionEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    token0: string;
    token1: string;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type SwapEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    fundId: BigNumber;
    investor: string;
    token: string;
    amount: BigNumber;
    feeAmount: BigNumber;
  }
>;

export type WithdrawFeeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    fundId: BigNumber;
    manager: string;
    token: string;
    amount: BigNumber;
  }
>;

export class DotoliFund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DotoliFundInterface;

  functions: {
    collectPositionFee(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    info(overrides?: CallOverrides): Promise<[string]>;

    mintNewPosition(
      fundId: BigNumberish,
      investor: string,
      _params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    setting(overrides?: CallOverrides): Promise<[string]>;

    swap(
      fundId: BigNumberish,
      investor: string,
      trades: {
        swapType: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        fee: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        amountInMaximum: BigNumberish;
        amountOutMinimum: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        path: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    weth9(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      fundId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collectPositionFee(
    fundId: BigNumberish,
    _params: {
      tokenId: BigNumberish;
      amount0Max: BigNumberish;
      amount1Max: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    fundId: BigNumberish,
    _params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    fundId: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseLiquidity(
    fundId: BigNumberish,
    _params: {
      tokenId: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  info(overrides?: CallOverrides): Promise<string>;

  mintNewPosition(
    fundId: BigNumberish,
    investor: string,
    _params: {
      token0: string;
      token1: string;
      fee: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  setting(overrides?: CallOverrides): Promise<string>;

  swap(
    fundId: BigNumberish,
    investor: string,
    trades: {
      swapType: BigNumberish;
      tokenIn: string;
      tokenOut: string;
      fee: BigNumberish;
      amountIn: BigNumberish;
      amountOut: BigNumberish;
      amountInMaximum: BigNumberish;
      amountOutMinimum: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      path: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  weth9(overrides?: CallOverrides): Promise<string>;

  withdraw(
    fundId: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    fundId: BigNumberish,
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectPositionFee(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    decreaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    deposit(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    info(overrides?: CallOverrides): Promise<string>;

    mintNewPosition(
      fundId: BigNumberish,
      investor: string,
      _params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    setting(overrides?: CallOverrides): Promise<string>;

    swap(
      fundId: BigNumberish,
      investor: string,
      trades: {
        swapType: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        fee: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        amountInMaximum: BigNumberish;
        amountOutMinimum: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        path: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    weth9(overrides?: CallOverrides): Promise<string>;

    withdraw(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      fundId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollectPositionFee(uint256,address,address,address,uint256,uint256)"(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    CollectPositionFee(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "DecreaseLiquidity(uint256,address,address,address,uint256,uint256)"(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    DecreaseLiquidity(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Deposit(uint256,address,address,uint256)"(
      fundId?: null,
      investor?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { fundId: BigNumber; investor: string; token: string; amount: BigNumber }
    >;

    Deposit(
      fundId?: null,
      investor?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { fundId: BigNumber; investor: string; token: string; amount: BigNumber }
    >;

    "DepositFee(uint256,address,address,uint256)"(
      fundId?: null,
      investor?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { fundId: BigNumber; investor: string; token: string; amount: BigNumber }
    >;

    DepositFee(
      fundId?: null,
      investor?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { fundId: BigNumber; investor: string; token: string; amount: BigNumber }
    >;

    "IncreaseLiquidity(uint256,address,address,address,uint256,uint256)"(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    IncreaseLiquidity(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "MintNewPosition(uint256,address,address,address,uint256,uint256)"(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    MintNewPosition(
      fundId?: null,
      investor?: string | null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token0: string;
        token1: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Swap(uint256,address,address,address,uint256,uint256)"(
      fundId?: null,
      investor?: string | null,
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    Swap(
      fundId?: null,
      investor?: string | null,
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    "Withdraw(uint256,address,address,uint256,uint256)"(
      fundId?: null,
      investor?: string | null,
      token?: null,
      amount?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token: string;
        amount: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    Withdraw(
      fundId?: null,
      investor?: string | null,
      token?: null,
      amount?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        fundId: BigNumber;
        investor: string;
        token: string;
        amount: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    "WithdrawFee(uint256,address,address,uint256)"(
      fundId?: null,
      manager?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { fundId: BigNumber; manager: string; token: string; amount: BigNumber }
    >;

    WithdrawFee(
      fundId?: null,
      manager?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { fundId: BigNumber; manager: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    collectPositionFee(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    mintNewPosition(
      fundId: BigNumberish,
      investor: string,
      _params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    setting(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      fundId: BigNumberish,
      investor: string,
      trades: {
        swapType: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        fee: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        amountInMaximum: BigNumberish;
        amountOutMinimum: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        path: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    weth9(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      fundId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectPositionFee(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      fundId: BigNumberish,
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNewPosition(
      fundId: BigNumberish,
      investor: string,
      _params: {
        token0: string;
        token1: string;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      fundId: BigNumberish,
      investor: string,
      trades: {
        swapType: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        fee: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        amountInMaximum: BigNumberish;
        amountOutMinimum: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        path: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      fundId: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      fundId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
